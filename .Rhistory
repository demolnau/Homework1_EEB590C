count_pvalue_cor_sig <- 0
for (i in 1:length(anova_lm_cor_tests)) {
if(anova_lm_cor_tests[[i]][["Pr(>F)"]][1] > 0.05){
count_pvalue_cor_nonsig <- count_pvalue_cor_nonsig + 1
sum_pvalue_cor_nonsig <- sum_pvalue_cor_nonsig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_cor_sig <- count_pvalue_cor_sig + 1
sum_pvalue_cor_sig <- sum_pvalue_cor_sig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_cor_tests_nonsig <- sum_pvalue_cor_nonsig/count_pvalue_cor_nonsig
average_pvalue_cor_tests_sig <- sum_pvalue_cor_sig/count_pvalue_cor_sig
average_pvalue_cor_tests <- (sum_pvalue_cor_nonsig + sum_pvalue_cor_sig)/(count_pvalue_cor_sig + count_pvalue_cor_nonsig)
#TODO -> sum up the pvalues that were less than 0.05
#install.packages("RRPP")
library(RRPP)
ourdata<-rrpp.data.frame(pos_cor_data[,2], pos_cor_data[,1])
model3<-lm.rrpp(pos_cor_data[,2]~pos_cor_data[,1], print.progress = FALSE, data = ourdata)
anova(model3)
# F.obs<-anova(summary_lm_cor_tests)$F[[1]]  #Find Test value and save
# permute<-1999
# F.rand.vec<-array(NA,(permute+1))
# F.rand.vec[permute+1]<-F.obs
#  Y = pos_cor_data[,2]
#  X1 = pos_cor_data[,1]
# for(i in 1:permute){
#   ###Shuffle Data
# 	y.rand<-sample(Y)	#Resample vector
# 	F.rand.vec[i]<-anova(lm(y.rand~X1))$F[[1]]
# }
# F.obs
# P.Ftest<-rank(F.rand.vec[permute+1])/(permute+1)
# P.Ftest
# ####Plot
# hist(F.rand.vec,40,freq=T,col="gray")
# segments(F.obs, 0, F.obs, 50)  ##Plot Observed value
#TODO --> make this a nice replcate or apply statement
#install.packages("RRPP")
library(RRPP)
ourdata<-rrpp.data.frame(pos_cor_data[,2], pos_cor_data[,1])
model3<-lm.rrpp(pos_cor_data[,2]~pos_cor_data[,1], print.progress = FALSE, data = ourdata)
anova(model3)
# F.obs<-anova(summary_lm_cor_tests)$F[[1]]  #Find Test value and save
# permute<-1999
# F.rand.vec<-array(NA,(permute+1))
# F.rand.vec[permute+1]<-F.obs
#  Y = pos_cor_data[,2]
#  X1 = pos_cor_data[,1]
# for(i in 1:permute){
#   ###Shuffle Data
# 	y.rand<-sample(Y)	#Resample vector
# 	F.rand.vec[i]<-anova(lm(y.rand~X1))$F[[1]]
# }
# F.obs
# P.Ftest<-rank(F.rand.vec[permute+1])/(permute+1)
# P.Ftest
# ####Plot
# hist(F.rand.vec,40,freq=T,col="gray")
# segments(F.obs, 0, F.obs, 50)  ##Plot Observed value
#TODO --> make this a nice replcate or apply statement
#data set with no relationship between x & Y
random_corr_gen<- function(elements) {
#set.seed(2)
x1<-rnorm(elements, mean = 0, sd = 0.3)# this could also be simply 1:100
#set.seed(3)
y1<-rnorm(elements, mean = 3, sd = 2) #this could be pulled from any distribution (ie poisson, uniform...)
uncor_dataframe<-data.frame(x1,y1)
}
uncor_data<-random_corr_gen(100)
plot(uncor_data,
main = "Uncorrelated Data",
xlab = "X (Independent Varible)",
ylab = "Y (Dependent Varible)")
#TODO ADD LABELS AND TITLE TO PLOT
#data set with positive association between x & Y
library(mvtnorm)
library(tidyverse)
corr.val <- .9
pos_cor_gen<- function(elements) {
cor_data<-data.frame(rmvnorm(n=elements,mean=c(0,0),sigma=matrix(c(1,corr.val,corr.val,1),2,2)))
names(cor_data)[1]<-"x1"
names(cor_data)[2]<- "y1"
return(cor_data)
}
pos_cor_data<-pos_cor_gen(100)
#Random Uncorrelated Data List
uncor_data_sim<-replicate(100,random_corr_gen(100), simplify = FALSE)
#data set with positive association between x & Y
library(mvtnorm)
library(tidyverse)
corr.val <- .9
pos_cor_gen<- function(elements) {
cor_data<-data.frame(rmvnorm(n=elements,mean=c(0,0),sigma=matrix(c(1,corr.val,corr.val,1),2,2)))
names(cor_data)[1]<-"x1"
names(cor_data)[2]<- "y1"
return(cor_data)
}
pos_cor_data<-pos_cor_gen(100)
#Random Uncorrelated Data List
uncor_data_sim<-replicate(100,random_corr_gen(100), simplify = FALSE)
#Random Correlated Data List
cor_data_sim<-replicate(100, pos_cor_gen(100), simplify = FALSE)
#cor_data_sim
#cor_data_sim[[1]] #shows the first list of 100 elements
#cor_data_sim[[1]][,1] #shows column x of the first list of 100 elements
#model 1 - uncorrelated
lm_uncor_tests<-lapply(uncor_data_sim,lm, formula = y1 ~ x1)
summary_lm_uncor_tests<-lapply(lm_uncor_tests,summary)
anova_lm_uncor_tests<-lapply(lm_uncor_tests,anova)
sum_pvalue_uncor_nonsig <- 0
sum_pvalue_uncor_sig <- 0
count_pvalue_uncor_nonsig <- 0
count_pvalue_uncor_sig <- 0
for (i in 1:length(anova_lm_uncor_tests)) {
if(anova_lm_uncor_tests[[i]][["Pr(>F)"]][1] > 0.05){
count_pvalue_uncor_nonsig <- count_pvalue_uncor_nonsig + 1
sum_pvalue_uncor_nonsig <- sum_pvalue_uncor_nonsig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_uncor_sig <- count_pvalue_uncor_sig + 1
sum_pvalue_uncor_sig <- sum_pvalue_uncor_sig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_uncor_tests_nonsig <- sum_pvalue_uncor_nonsig/count_pvalue_uncor_nonsig
average_pvalue_uncor_tests_sig <- sum_pvalue_uncor_sig/count_pvalue_uncor_sig
average_pvalue_uncor_tests <- (sum_pvalue_uncor_nonsig + sum_pvalue_uncor_sig)/(count_pvalue_uncor_sig + count_pvalue_uncor_nonsig)
#TODO -> sum up the pvalues that were less than 0.05
#model 1 - uncorrelated
lm_uncor_tests<-lapply(uncor_data_sim,lm, formula = y1 ~ x1)
summary_lm_uncor_tests<-lapply(lm_uncor_tests,summary)
anova_lm_uncor_tests<-lapply(lm_uncor_tests,anova)
sum_pvalue_uncor_nonsig <- 0
sum_pvalue_uncor_sig <- 0
count_pvalue_uncor_nonsig <- 0
count_pvalue_uncor_sig <- 0
for (i in 1:length(anova_lm_uncor_tests)) {
if(anova_lm_uncor_tests[[i]][["Pr(>F)"]][1] > 0.05){
count_pvalue_uncor_nonsig <- count_pvalue_uncor_nonsig + 1
sum_pvalue_uncor_nonsig <- sum_pvalue_uncor_nonsig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_uncor_sig <- count_pvalue_uncor_sig + 1
print(anova_lm_uncor_tests[[i]])
sum_pvalue_uncor_sig <- sum_pvalue_uncor_sig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_uncor_tests_nonsig <- sum_pvalue_uncor_nonsig/count_pvalue_uncor_nonsig
average_pvalue_uncor_tests_sig <- sum_pvalue_uncor_sig/count_pvalue_uncor_sig
average_pvalue_uncor_tests <- (sum_pvalue_uncor_nonsig + sum_pvalue_uncor_sig)/(count_pvalue_uncor_sig + count_pvalue_uncor_nonsig)
#TODO -> sum up the pvalues that were less than 0.05
print(i)
#model 1 - uncorrelated
lm_uncor_tests<-lapply(uncor_data_sim,lm, formula = y1 ~ x1)
summary_lm_uncor_tests<-lapply(lm_uncor_tests,summary)
anova_lm_uncor_tests<-lapply(lm_uncor_tests,anova)
sum_pvalue_uncor_nonsig <- 0
sum_pvalue_uncor_sig <- 0
count_pvalue_uncor_nonsig <- 0
count_pvalue_uncor_sig <- 0
for (i in 1:length(anova_lm_uncor_tests)) {
if(anova_lm_uncor_tests[[i]][["Pr(>F)"]][1] > 0.05){
count_pvalue_uncor_nonsig <- count_pvalue_uncor_nonsig + 1
sum_pvalue_uncor_nonsig <- sum_pvalue_uncor_nonsig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_uncor_sig <- count_pvalue_uncor_sig + 1
print(i)
sum_pvalue_uncor_sig <- sum_pvalue_uncor_sig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_uncor_tests_nonsig <- sum_pvalue_uncor_nonsig/count_pvalue_uncor_nonsig
average_pvalue_uncor_tests_sig <- sum_pvalue_uncor_sig/count_pvalue_uncor_sig
average_pvalue_uncor_tests <- (sum_pvalue_uncor_nonsig + sum_pvalue_uncor_sig)/(count_pvalue_uncor_sig + count_pvalue_uncor_nonsig)
#TODO -> sum up the pvalues that were less than 0.05
#model 2 - positively correlated model
lm_cor_tests<-lapply(cor_data_sim,lm, formula = y1~x1)
summary_lm_cor_tests<-lapply(lm_cor_tests,summary)
anova_lm_cor_tests<-lapply(lm_cor_tests,anova)
sum_pvalue_cor_nonsig <- 0
sum_pvalue_cor_sig <- 0
count_pvalue_cor_nonsig <- 0
count_pvalue_cor_sig <- 0
for (i in 1:length(anova_lm_cor_tests)) {
if(anova_lm_cor_tests[[i]][["Pr(>F)"]][1] > 0.05){
count_pvalue_cor_nonsig <- count_pvalue_cor_nonsig + 1
sum_pvalue_cor_nonsig <- sum_pvalue_cor_nonsig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_cor_sig <- count_pvalue_cor_sig + 1
sum_pvalue_cor_sig <- sum_pvalue_cor_sig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
print(i)
}
}
average_pvalue_cor_tests_nonsig <- sum_pvalue_cor_nonsig/count_pvalue_cor_nonsig
average_pvalue_cor_tests_sig <- sum_pvalue_cor_sig/count_pvalue_cor_sig
average_pvalue_cor_tests <- (sum_pvalue_cor_nonsig + sum_pvalue_cor_sig)/(count_pvalue_cor_sig + count_pvalue_cor_nonsig)
#TODO -> sum up the pvalues that were less than 0.05
#model 2 - positively correlated model
lm_cor_tests<-lapply(cor_data_sim,lm, formula = y1~x1)
summary_lm_cor_tests<-lapply(lm_cor_tests,summary)
anova_lm_cor_tests<-lapply(lm_cor_tests,anova)
sum_pvalue_cor_nonsig <- 0
sum_pvalue_cor_sig <- 0
count_pvalue_cor_nonsig <- 0
count_pvalue_cor_sig <- 0
for (i in 1:length(anova_lm_cor_tests)) {
if(anova_lm_cor_tests[[i]][["Pr(>F)"]][1] > 0.05){
print(i)
count_pvalue_cor_nonsig <- count_pvalue_cor_nonsig + 1
sum_pvalue_cor_nonsig <- sum_pvalue_cor_nonsig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_cor_sig <- count_pvalue_cor_sig + 1
sum_pvalue_cor_sig <- sum_pvalue_cor_sig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_cor_tests_nonsig <- sum_pvalue_cor_nonsig/count_pvalue_cor_nonsig
average_pvalue_cor_tests_sig <- sum_pvalue_cor_sig/count_pvalue_cor_sig
average_pvalue_cor_tests <- (sum_pvalue_cor_nonsig + sum_pvalue_cor_sig)/(count_pvalue_cor_sig + count_pvalue_cor_nonsig)
#TODO -> sum up the pvalues that were less than 0.05
#model 1 - uncorrelated
lm_uncor_tests<-lapply(uncor_data_sim,lm, formula = y1 ~ x1)
summary_lm_uncor_tests<-lapply(lm_uncor_tests,summary)
anova_lm_uncor_tests<-lapply(lm_uncor_tests,anova)
sum_pvalue_uncor_nonsig <- 0
sum_pvalue_uncor_sig <- 0
count_pvalue_uncor_nonsig <- 0
count_pvalue_uncor_sig <- 0
for (i in 1:length(anova_lm_uncor_tests)) {
if(anova_lm_uncor_tests[[i]][["Pr(>F)"]][1] > 0.05){
count_pvalue_uncor_nonsig <- count_pvalue_uncor_nonsig + 1
sum_pvalue_uncor_nonsig <- sum_pvalue_uncor_nonsig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_uncor_sig <- count_pvalue_uncor_sig + 1
print(i)
sum_pvalue_uncor_sig <- sum_pvalue_uncor_sig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_uncor_tests_nonsig <- sum_pvalue_uncor_nonsig/count_pvalue_uncor_nonsig
average_pvalue_uncor_tests_sig <- sum_pvalue_uncor_sig/count_pvalue_uncor_sig
average_pvalue_uncor_tests <- (sum_pvalue_uncor_nonsig + sum_pvalue_uncor_sig)/(count_pvalue_uncor_sig + count_pvalue_uncor_nonsig)
#TODO -> sum up the pvalues that were less than 0.05
#model 2 - positively correlated model
lm_cor_tests<-lapply(cor_data_sim,lm, formula = y1~x1)
summary_lm_cor_tests<-lapply(lm_cor_tests,summary)
anova_lm_cor_tests<-lapply(lm_cor_tests,anova)
sum_pvalue_cor_nonsig <- 0
sum_pvalue_cor_sig <- 0
count_pvalue_cor_nonsig <- 0
count_pvalue_cor_sig <- 0
for (i in 1:length(anova_lm_cor_tests)) {
if(anova_lm_cor_tests[[i]][["Pr(>F)"]][1] > 0.05){
print(i)
count_pvalue_cor_nonsig <- count_pvalue_cor_nonsig + 1
sum_pvalue_cor_nonsig <- sum_pvalue_cor_nonsig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_cor_sig <- count_pvalue_cor_sig + 1
sum_pvalue_cor_sig <- sum_pvalue_cor_sig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_cor_tests_nonsig <- sum_pvalue_cor_nonsig/count_pvalue_cor_nonsig
average_pvalue_cor_tests_sig <- sum_pvalue_cor_sig/count_pvalue_cor_sig
average_pvalue_cor_tests <- (sum_pvalue_cor_nonsig + sum_pvalue_cor_sig)/(count_pvalue_cor_sig + count_pvalue_cor_nonsig)
#TODO -> sum up the pvalues that were less than 0.05
View(model3)
View(ourdata)
rm(list=ls()) #remove unwanted variables and start on clear slate
library(knitr)
library(microbenchmark)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("formatR")
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#data set with no relationship between x & Y
random_corr_gen<- function(elements) {
x1<-rnorm(elements, mean = 0, sd = 0.3)
y1<-rnorm(elements, mean = 3, sd = 2)
uncor_dataframe<-data.frame(x1,y1)
}
uncor_data<-random_corr_gen(100)
plot(uncor_data,
main = "Uncorrelated Data",
xlab = "X",
ylab = "Y")
#data set with positive association between x & Y
library(mvtnorm)
library(tidyverse)
corr.val <- .9
pos_cor_gen<- function(elements) {
cor_data<-data.frame(rmvnorm(n=elements,mean=c(0,0),sigma=matrix(c(1,corr.val,corr.val,1),2,2)))
names(cor_data)[1]<-"x1"
names(cor_data)[2]<- "y1"
return(cor_data)
}
pos_cor_data<-pos_cor_gen(100)
#Random Uncorrelated Data List
uncor_data_sim<-replicate(100,random_corr_gen(100), simplify = FALSE)
#Random Correlated Data List
cor_data_sim<-replicate(100, pos_cor_gen(100), simplify = FALSE)
#model 1 - uncorrelated
lm_uncor_tests<-lapply(uncor_data_sim,lm, formula = y1 ~ x1)
summary_lm_uncor_tests<-lapply(lm_uncor_tests,summary)
anova_lm_uncor_tests<-lapply(lm_uncor_tests,anova)
sum_pvalue_uncor_nonsig <- 0
sum_pvalue_uncor_sig <- 0
count_pvalue_uncor_nonsig <- 0
count_pvalue_uncor_sig <- 0
for (i in 1:length(anova_lm_uncor_tests)) {
if(anova_lm_uncor_tests[[i]][["Pr(>F)"]][1] > 0.05){
count_pvalue_uncor_nonsig <- count_pvalue_uncor_nonsig + 1
sum_pvalue_uncor_nonsig <- sum_pvalue_uncor_nonsig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_uncor_sig <- count_pvalue_uncor_sig + 1
print(i)
sum_pvalue_uncor_sig <- sum_pvalue_uncor_sig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_uncor_tests_nonsig <- sum_pvalue_uncor_nonsig/count_pvalue_uncor_nonsig
average_pvalue_uncor_tests_sig <- sum_pvalue_uncor_sig/count_pvalue_uncor_sig
average_pvalue_uncor_tests <- (sum_pvalue_uncor_nonsig + sum_pvalue_uncor_sig)/(count_pvalue_uncor_sig + count_pvalue_uncor_nonsig)
#model 2 - positively correlated model
lm_cor_tests<-lapply(cor_data_sim,lm, formula = y1~x1)
summary_lm_cor_tests<-lapply(lm_cor_tests,summary)
anova_lm_cor_tests<-lapply(lm_cor_tests,anova)
sum_pvalue_cor_nonsig <- 0
sum_pvalue_cor_sig <- 0
count_pvalue_cor_nonsig <- 0
count_pvalue_cor_sig <- 0
for (i in 1:length(anova_lm_cor_tests)) {
if(anova_lm_cor_tests[[i]][["Pr(>F)"]][1] > 0.05){
print(i)
count_pvalue_cor_nonsig <- count_pvalue_cor_nonsig + 1
sum_pvalue_cor_nonsig <- sum_pvalue_cor_nonsig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_cor_sig <- count_pvalue_cor_sig + 1
sum_pvalue_cor_sig <- sum_pvalue_cor_sig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_cor_tests_nonsig <- sum_pvalue_cor_nonsig/count_pvalue_cor_nonsig
average_pvalue_cor_tests_sig <- sum_pvalue_cor_sig/count_pvalue_cor_sig
average_pvalue_cor_tests <- (sum_pvalue_cor_nonsig + sum_pvalue_cor_sig)/(count_pvalue_cor_sig + count_pvalue_cor_nonsig)
#install.packages("RRPP")
library(RRPP)
ourdata<-rrpp.data.frame(pos_cor_data[,2], pos_cor_data[,1])
model3<-lm.rrpp(pos_cor_data[,2]~pos_cor_data[,1],iter=999, print.progress = FALSE, data = ourdata)
anova(model3)
pos_cor_lm<-anova(lm(pos_cor_data$y1 ~ pos_cor_data$x1))
f.obs<-pos_cor_lm$`Pr(>F)`[1]
#Randomization function
permute_correlated_data<-function(correlated_data, permute_num, f.obs.reported){
P.1tailed<-P.2tailed<-1
f.rand.vec<-array(NA,(permute_num+1))
f.rand.vec[permute_num+1]<-f.obs.reported
for(i in 1:permute_num){
###Shuffle Data
permuted_cor_data<-sample(correlated_data$y1)
###Run analysis on random data
permuted_pos_cor_lm<-anova(lm(permuted_cor_data~correlated_data$x1))
f.rand.vec[i]<-permuted_pos_cor_lm$`Pr(>F)`[1]
}  #end permute
return(f.rand.vec)
}
f_values_of_permuted_pos_data<-permute_correlated_data(pos_cor_data, 999 ,f.obs)
permute<-999
##Significance assessment
P.1tailed<-length(which(f_values_of_permuted_pos_data<=f_values_of_permuted_pos_data[permute+1])) / (permute+1)  #because observed is negative
P.2tailed<-length(which(abs(f_values_of_permuted_pos_data)>=abs(f_values_of_permuted_pos_data[permute+1]))) / (permute+1)
P.1tailed
P.2tailed
####Plot
hist(f_values_of_permuted_pos_data,20,freq=T,col="gray")
segments(f.obs, 0, f.obs, 50)  ##Plot Observed value
library(microbenchmark)
res<-microbenchmark(anova(lm.rrpp(pos_cor_data[,2]~pos_cor_data[,1],iter=999, print.progress = FALSE, data = ourdata)),times=1) #using rrpp for permutation method
print(res)
res2<-microbenchmark(permute_correlated_data(pos_cor_data, 999,f.obs),times = 1)
print(res2) #second permutation method
#model 1 - uncorrelated
lm_uncor_tests<-lapply(uncor_data_sim,lm, formula = y1 ~ x1)
summary_lm_uncor_tests<-lapply(lm_uncor_tests,summary)
anova_lm_uncor_tests<-lapply(lm_uncor_tests,anova)
sum_pvalue_uncor_nonsig <- 0
sum_pvalue_uncor_sig <- 0
count_pvalue_uncor_nonsig <- 0
count_pvalue_uncor_sig <- 0
for (i in 1:length(anova_lm_uncor_tests)) {
if(anova_lm_uncor_tests[[i]][["Pr(>F)"]][1] > 0.05){
count_pvalue_uncor_nonsig <- count_pvalue_uncor_nonsig + 1
sum_pvalue_uncor_nonsig <- sum_pvalue_uncor_nonsig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_uncor_sig <- count_pvalue_uncor_sig + 1
print(i)
sum_pvalue_uncor_sig <- sum_pvalue_uncor_sig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_uncor_tests_nonsig <- sum_pvalue_uncor_nonsig/count_pvalue_uncor_nonsig
average_pvalue_uncor_tests_sig <- sum_pvalue_uncor_sig/count_pvalue_uncor_sig
average_pvalue_uncor_tests <- (sum_pvalue_uncor_nonsig + sum_pvalue_uncor_sig)/(count_pvalue_uncor_sig + count_pvalue_uncor_nonsig)
#model 1 - uncorrelated
lm_uncor_tests<-lapply(uncor_data_sim,lm, formula = y1 ~ x1)
summary_lm_uncor_tests<-lapply(lm_uncor_tests,summary)
anova_lm_uncor_tests<-lapply(lm_uncor_tests,anova)
sum_pvalue_uncor_nonsig <- 0
sum_pvalue_uncor_sig <- 0
count_pvalue_uncor_nonsig <- 0
count_pvalue_uncor_sig <- 0
for (i in 1:length(anova_lm_uncor_tests)) {
if(anova_lm_uncor_tests[[i]][["Pr(>F)"]][1] > 0.05){
count_pvalue_uncor_nonsig <- count_pvalue_uncor_nonsig + 1
sum_pvalue_uncor_nonsig <- sum_pvalue_uncor_nonsig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_uncor_sig <- count_pvalue_uncor_sig + 1
#print(i)
sum_pvalue_uncor_sig <- sum_pvalue_uncor_sig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_uncor_tests_nonsig <- sum_pvalue_uncor_nonsig/count_pvalue_uncor_nonsig
print(paste("Average pvalue less than 0.05 for uncorrelated tests ", average_pvalue_uncor_tests_nonsig))
average_pvalue_uncor_tests_sig <- sum_pvalue_uncor_sig/count_pvalue_uncor_sig
print(paste("Average p-value greater than 0.05 for uncorrelated tests ", average_pvalue_uncor_tests_sig))
average_pvalue_uncor_tests <- (sum_pvalue_uncor_nonsig + sum_pvalue_uncor_sig)/(count_pvalue_uncor_sig + count_pvalue_uncor_nonsig)
print(paste("Average p-value for all uncorrelated tests ", average_pvalue_uncor_tests))
#model 1 - uncorrelated
lm_uncor_tests<-lapply(uncor_data_sim,lm, formula = y1 ~ x1)
summary_lm_uncor_tests<-lapply(lm_uncor_tests,summary)
anova_lm_uncor_tests<-lapply(lm_uncor_tests,anova)
sum_pvalue_uncor_nonsig <- 0
sum_pvalue_uncor_sig <- 0
count_pvalue_uncor_nonsig <- 0
count_pvalue_uncor_sig <- 0
for (i in 1:length(anova_lm_uncor_tests)) {
if(anova_lm_uncor_tests[[i]][["Pr(>F)"]][1] > 0.05){
count_pvalue_uncor_nonsig <- count_pvalue_uncor_nonsig + 1
sum_pvalue_uncor_nonsig <- sum_pvalue_uncor_nonsig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_uncor_sig <- count_pvalue_uncor_sig + 1
#print(i)
sum_pvalue_uncor_sig <- sum_pvalue_uncor_sig + anova_lm_uncor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_uncor_tests_nonsig <- sum_pvalue_uncor_nonsig/count_pvalue_uncor_nonsig
print(paste("Average pvalue less than 0.05 for uncorrelated tests:", average_pvalue_uncor_tests_nonsig))
average_pvalue_uncor_tests_sig <- sum_pvalue_uncor_sig/count_pvalue_uncor_sig
print(paste("Average p-value greater than 0.05 for uncorrelated tests:", average_pvalue_uncor_tests_sig))
average_pvalue_uncor_tests <- (sum_pvalue_uncor_nonsig + sum_pvalue_uncor_sig)/(count_pvalue_uncor_sig + count_pvalue_uncor_nonsig)
print(paste("Average p-value for all uncorrelated tests:", average_pvalue_uncor_tests))
#model 2 - positively correlated model
lm_cor_tests<-lapply(cor_data_sim,lm, formula = y1~x1)
summary_lm_cor_tests<-lapply(lm_cor_tests,summary)
anova_lm_cor_tests<-lapply(lm_cor_tests,anova)
sum_pvalue_cor_nonsig <- 0
sum_pvalue_cor_sig <- 0
count_pvalue_cor_nonsig <- 0
count_pvalue_cor_sig <- 0
for (i in 1:length(anova_lm_cor_tests)) {
if(anova_lm_cor_tests[[i]][["Pr(>F)"]][1] > 0.05){
print(i)
count_pvalue_cor_nonsig <- count_pvalue_cor_nonsig + 1
sum_pvalue_cor_nonsig <- sum_pvalue_cor_nonsig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_cor_sig <- count_pvalue_cor_sig + 1
sum_pvalue_cor_sig <- sum_pvalue_cor_sig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_cor_tests_nonsig <- sum_pvalue_cor_nonsig/count_pvalue_cor_nonsig
print(paste("Average pvalue less than 0.05 for correlated tests:", average_pvalue_uncor_tests_nonsig))
average_pvalue_cor_tests_sig <- sum_pvalue_cor_sig/count_pvalue_cor_sig
print(paste("Average p-value greater than 0.05 for correlated tests:", average_pvalue_uncor_tests_sig))
average_pvalue_cor_tests <- (sum_pvalue_cor_nonsig + sum_pvalue_cor_sig)/(count_pvalue_cor_sig + count_pvalue_cor_nonsig)
print(paste("Average p-value for all correlated tests:", average_pvalue_uncor_tests))
#model 2 - positively correlated model
lm_cor_tests<-lapply(cor_data_sim,lm, formula = y1~x1)
summary_lm_cor_tests<-lapply(lm_cor_tests,summary)
anova_lm_cor_tests<-lapply(lm_cor_tests,anova)
sum_pvalue_cor_nonsig <- 0
sum_pvalue_cor_sig <- 0
count_pvalue_cor_nonsig <- 0
count_pvalue_cor_sig <- 0
for (i in 1:length(anova_lm_cor_tests)) {
if(anova_lm_cor_tests[[i]][["Pr(>F)"]][1] > 0.05){
print(i)
count_pvalue_cor_nonsig <- count_pvalue_cor_nonsig + 1
sum_pvalue_cor_nonsig <- sum_pvalue_cor_nonsig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_cor_sig <- count_pvalue_cor_sig + 1
sum_pvalue_cor_sig <- sum_pvalue_cor_sig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_cor_tests_nonsig <- sum_pvalue_cor_nonsig/count_pvalue_cor_nonsig
print(paste("Average pvalue less than 0.05 for correlated tests:", average_pvalue_cor_tests_nonsig))
average_pvalue_cor_tests_sig <- sum_pvalue_cor_sig/count_pvalue_cor_sig
print(paste("Average p-value greater than 0.05 for correlated tests:", average_pvalue_cor_tests_sig))
average_pvalue_cor_tests <- (sum_pvalue_cor_nonsig + sum_pvalue_cor_sig)/(count_pvalue_cor_sig + count_pvalue_cor_nonsig)
print(paste("Average p-value for all correlated tests:", average_pvalue_cor_tests))
#model 2 - positively correlated model
lm_cor_tests<-lapply(cor_data_sim,lm, formula = y1~x1)
summary_lm_cor_tests<-lapply(lm_cor_tests,summary)
anova_lm_cor_tests<-lapply(lm_cor_tests,anova)
sum_pvalue_cor_nonsig <- 0
sum_pvalue_cor_sig <- 0
count_pvalue_cor_nonsig <- 0
count_pvalue_cor_sig <- 0
for (i in 1:length(anova_lm_cor_tests)) {
if(anova_lm_cor_tests[[i]][["Pr(>F)"]][1] > 0.05){
print(i)
count_pvalue_cor_nonsig <- count_pvalue_cor_nonsig + 1
sum_pvalue_cor_nonsig <- sum_pvalue_cor_nonsig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
} else{
count_pvalue_cor_sig <- count_pvalue_cor_sig + 1
sum_pvalue_cor_sig <- sum_pvalue_cor_sig + anova_lm_cor_tests[[i]][["Pr(>F)"]][1]
}
}
average_pvalue_cor_tests_sig <- sum_pvalue_cor_sig/count_pvalue_cor_sig
print(paste("Average pvalue less than 0.05 for correlated tests:", average_pvalue_cor_tests_sig))
average_pvalue_cor_tests_nonsig <- sum_pvalue_cor_nonsig/count_pvalue_cor_nonsig
print(paste("Average p-value greater than 0.05 for correlated tests:", average_pvalue_cor_tests_nonsig))
average_pvalue_cor_tests <- (sum_pvalue_cor_nonsig + sum_pvalue_cor_sig)/(count_pvalue_cor_sig + count_pvalue_cor_nonsig)
print(paste("Average p-value for all correlated tests:", average_pvalue_cor_tests))
